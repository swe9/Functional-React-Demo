{"version":3,"sources":["InfiniteGrid.tsx","Giphy.ts","features/items/itemsSlice.ts","App.tsx","app/store.js","reportWebVitals.js","index.js"],"names":["InfiniteGrid","props","openItemHandler","event","openItem","currentTarget","dataset","id","items","length","itemsPerRow","parseInt","className","dataLength","next","nextPage","hasMore","loader","arr","chunkSize","R","i","len","push","slice","chunk_array","map","chunk","data-testid","item","index","sm","data-id","onClick","renderItem","giphy_api_key","fetchGiphyItems","offset","a","axios","result","data","itemsSlice","createSlice","name","initialState","value","reducers","addItems","state","action","concat","payload","addItemsAsync","dispatch","getState","newItems","alert","selectItems","actions","App","useSelector","useDispatch","useState","openedItem","setOpenedItem","filter","setFilter","useEffect","type","onChange","target","title","includes","src","images","fixed_height","url","height","alt","original","configureStore","reducer","itemsReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.ce8df429.chunk.js","sourcesContent":["import React from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { Container, Row, Col } from 'react-grid-system';\n\n// items MUST have an 'id' property if the openItem callback is used\nexport type InfiniteGridProps = {\n    items: any[];\n    itemsPerRow: string;\n    nextPage: () => void;\n    openItem: (id: string) => void;\n    renderItem: (item: any) => React.ReactNode;\n}\n\nconst InfiniteGrid = (props: InfiniteGridProps) => {\n    function chunk_array<T>(arr: Array<T>, chunkSize: number): Array<Array<T>> {\n        var R = [];\n        for (var i = 0, len = arr.length; i < len; i += chunkSize)\n            R.push(arr.slice(i, i + chunkSize));\n        return R;\n    };\n\n    const openItemHandler = (event: any) => {\n        props.openItem(event.currentTarget.dataset.id)\n    }\n\n    if (props.items.length === 0) {\n        return (\n            <h4>Empty List</h4>\n        )\n    }\n\n    let itemsPerRow = parseInt(props.itemsPerRow);\n    return (\n        <div className=\"InfiniteGrid\">\n            <InfiniteScroll\n                dataLength={props.items.length}\n                next={props.nextPage}\n                hasMore={true}\n                loader={<h4>Loading...</h4>}\n            >\n                <Container>\n                    {chunk_array(props.items, itemsPerRow).map((chunk) => (\n                        <Row key={chunk[0].id} data-testid=\"row\">\n                            {chunk.map((item, index) => (\n                                <Col key={item.id} sm={4} data-id={item.id} onClick={openItemHandler}>\n                                    {props.renderItem(item)}\n                                </Col>\n                            ))}\n                        </Row>\n                    ))}\n                </Container>\n            </InfiniteScroll>\n        </div>\n    );\n}\n\nexport default InfiniteGrid","import axios from 'axios';\n\nexport const giphy_api_key = \"QkvyK4ZLwOJBNmwV93GZxDnitcbh7LEm\";\n\ninterface giphy_fixed {\n  url: string;\n  width: string;\n  height: string;\n  size: string;\n  mp4: string;\n  mp4_size: string;\n  webp: string;\n  webp_size: string;\n};\n\ninterface giphy_original {\n  frames: string;\n  hash: string;\n  url: string;\n  width: string;\n  height: string;\n  size: string;\n  mp4: string;\n  mp4_size: string;\n  webp: string;\n  webp_size: string;\n};\n\ninterface giphy_images {\n  fixed_height: giphy_fixed\n  original: giphy_original;\n}\n\ninterface giphy_trending {\n  id: string;\n  type: string;\n  url: string;\n  embed_url: string;\n  title: string;\n  images: giphy_images;\n};\n\nexport async function fetchGiphyItems(offset: number) {\n  const result = await axios(\n    `https://api.giphy.com/v1/gifs/trending?api_key=${giphy_api_key}&offset=${offset}`,\n  );\n\n  return result.data.data\n}\n\nexport default giphy_trending","import { createSlice } from '@reduxjs/toolkit'\nimport { fetchGiphyItems } from 'Giphy'\n\nexport const itemsSlice = createSlice({\n    name: 'items',\n    initialState: { value: [] },\n    reducers: {\n        addItems: (state, action) => {\n            state.value = state.value.concat(action.payload)\n        }\n    }\n})\n\nexport const addItemsAsync = (offset: number) => {\n  return async (dispatch: any, getState: any) => {\n      try {\n          const newItems = await fetchGiphyItems(offset)\n          dispatch(addItems(newItems))\n      } catch (err) {\n          // some error handling...\n          alert(\"error fetching Giphy items for offset \" + offset)\n      }\n    }\n}\n\nexport const selectItems = (state: any) => state.items.value\n\nexport const { addItems } = itemsSlice.actions\n\nexport default itemsSlice.reducer","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport giphy_trending from 'Giphy'\nimport InfiniteGrid from 'InfiniteGrid'\nimport { addItemsAsync, selectItems } from 'features/items/itemsSlice';\n\nfunction App() {\n  const items = useSelector(selectItems)\n  const dispatch = useDispatch()\n\n  const [openedItem, setOpenedItem] = useState<giphy_trending>(null as unknown as giphy_trending);\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    if (typeof items === 'undefined') alert(\"items is undefined\")\n    if (items.length === 0) dispatch(addItemsAsync(0))\n  })\n\n  const nextPage = () => { dispatch(addItemsAsync(items.length))}\n\n  const openItemHandler = (id: string) => {\n    let item = items.filter((item: giphy_trending) => item.id === id)[0];\n    setOpenedItem(item)\n  }\n\n  const closeOpenedItem = (event: any) => {\n    setOpenedItem(null as unknown as giphy_trending);\n  }\n\n  const renderItem = (item: any) => {\n    let i = item as giphy_trending;\n    return (\n        <div>\n            <img src={i.images.fixed_height.url} height=\"200\" alt={i.title} />\n            <br />\n            {i.title}\n        </div>\n    )\n  }\n\n  if (openedItem === null) {\n    return (\n      <div>\n        <h1>Giphy Trending Demo Project</h1>\n        <input type=\"text\" value={filter} onChange={event => setFilter(event.target.value)} />\n        <InfiniteGrid\n          items={items.filter((item: giphy_trending) => item.title.includes(filter))}\n          itemsPerRow=\"3\" \n          nextPage={nextPage}\n          openItem={openItemHandler}\n          renderItem={renderItem}\n        />\n      </div>\n    );\n  } else {\n    let item = openedItem as unknown as giphy_trending;\n    return (\n      <div><img src={item.images.original.url} alt={item.title} />\n        <br />\n        {item.title}\n        <br />\n        <button type=\"button\" onClick={closeOpenedItem}>Close</button>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\nimport itemsReducer from '../features/items/itemsSlice'\n\nexport default configureStore({\n  reducer: {\n    items: itemsReducer\n  }\n})","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './app/store'\nimport { Provider } from 'react-redux'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}